grid.arrange(reserve.plot.pe + theme(legend.position = 'none'),
count.plot.pe)
output[1, 'ibnrReserve.dcl']
output[1, 'ibnrReserve.actual']
pe(output[, 'ibnrReserve.dcl'], output[, 'ibnrReserve.actual'])[1]
pe <- function(pred, actual)
{
return((actual-pred) / actual)
}
reserve.plot.pe <- ggplot() + ggstyle +
geom_point(aes(evaluationDates, pe(output[, 'ibnrReserve.pred'], output[, 'ibnrReserve.actual']), color = 'granular')) +
geom_line(aes(evaluationDates, pe(output[, 'ibnrReserve.pred'], output[, 'ibnrReserve.actual']), color = 'granular')) +
geom_ribbon(aes(evaluationDates, ymin = pe(output[, 'ibnrReserve.q025'], output[, 'ibnrReserve.actual']), ymax = pe(output[, 'ibnrReserve.q975'], output[, 'ibnrReserve.actual']), fill = 'granular') , alpha = 0.2) +
geom_point(aes(evaluationDates, pe(output[, 'ibnrReserve.dcl'], output[, 'ibnrReserve.actual']), color = 'dcl')) +
geom_line(aes(evaluationDates, pe(output[, 'ibnrReserve.dcl'], output[, 'ibnrReserve.actual']), color = 'dcl')) +
ggtitle('IBNR Reserve - Argenta Brand') +
scale_colour_manual('method', values = c(gggreen, ggblue)) +
scale_fill_manual('method', values = c(ggblue), guide=  FALSE) +
ylab('Reserve') +
theme(legend.position = 'bottom')
pe <- function(pred, actual)
{
return((pred-actual) / actual)
}
reserve.plot.pe <- ggplot() + ggstyle +
geom_point(aes(evaluationDates, pe(output[, 'ibnrReserve.pred'], output[, 'ibnrReserve.actual']), color = 'granular')) +
geom_line(aes(evaluationDates, pe(output[, 'ibnrReserve.pred'], output[, 'ibnrReserve.actual']), color = 'granular')) +
geom_ribbon(aes(evaluationDates, ymin = pe(output[, 'ibnrReserve.q025'], output[, 'ibnrReserve.actual']), ymax = pe(output[, 'ibnrReserve.q975'], output[, 'ibnrReserve.actual']), fill = 'granular') , alpha = 0.2) +
geom_point(aes(evaluationDates, pe(output[, 'ibnrReserve.dcl'], output[, 'ibnrReserve.actual']), color = 'dcl')) +
geom_line(aes(evaluationDates, pe(output[, 'ibnrReserve.dcl'], output[, 'ibnrReserve.actual']), color = 'dcl')) +
ggtitle('IBNR Reserve - Argenta Brand') +
scale_colour_manual('method', values = c(gggreen, ggblue)) +
scale_fill_manual('method', values = c(ggblue), guide=  FALSE) +
ylab('Reserve') +
theme(legend.position = 'bottom')
count.plot.pe <- ggplot() + ggstyle +
geom_point(aes(evaluationDates, pe(output[, 'ibnrCount.pred'], output[, 'ibnrCount.actual']), color = 'granular')) +
geom_line(aes(evaluationDates, pe(output[, 'ibnrCount.pred'], output[, 'ibnrCount.actual']), color = 'granular')) +
geom_ribbon(aes(evaluationDates, ymin = pe(output[, 'ibnrCount.q025'], output[, 'ibnrCount.actual']), ymax = pe(output[, 'ibnrCount.q975'], output[, 'ibnrCount.actual']), fill = 'granular') , alpha = 0.2) +
geom_point(aes(evaluationDates, pe(output[, 'ibnrCount.dcl'], output[, 'ibnrCount.actual']), color = 'dcl')) +
geom_line(aes(evaluationDates, pe(output[, 'ibnrCount.dcl'], output[, 'ibnrCount.actual']), color = 'dcl')) +
ggtitle('IBNR Count - Argenta Brand') +
scale_colour_manual('method', values = c(gggreen, ggblue)) +
scale_fill_manual('method', values = c(ggblue), guide=  FALSE) +
ylab('IBNR') +
theme(legend.position = 'bottom')
grid.arrange(reserve.plot.pe + theme(legend.position = 'none'),
count.plot.pe)
mean(pe(output[, 'ibnrCount.dcl'], output[, 'ibnrCount.actual']))
mean(pe(output[, 'ibnrReserve.dcl'], output[, 'ibnrReserve.actual']))
load("C:/Users/u0110176/Dropbox/Research RBNS/R code/IBNR Reserve/IBNRReserveMWA.movingWindow.RData")
evaluationDates <- evaluationDates[1:nrow(output)]
reserve.plot <- ggplot() + ggstyle +
geom_point(aes(evaluationDates, output[, 'ibnrReserve.actual'], color = 'actual')) +
geom_line(aes(evaluationDates, output[, 'ibnrReserve.actual'], color  = 'actual')) +
geom_point(aes(evaluationDates, output[, 'ibnrReserve.pred'], color = 'granular')) +
geom_line(aes(evaluationDates, output[, 'ibnrReserve.pred'], color = 'granular')) +
geom_ribbon(aes(evaluationDates, ymin = output[, 'ibnrReserve.q025'], ymax = output[, 'ibnrReserve.q975'], fill = 'granular') , alpha = 0.2) +
geom_point(aes(evaluationDates, output[, 'ibnrReserve.dcl'], color = 'dcl')) +
geom_line(aes(evaluationDates, output[, 'ibnrReserve.dcl'], color = 'dcl')) +
ggtitle('IBNR Reserve - Argenta Brand') +
scale_colour_manual('method', values = c('black', gggreen, ggblue)) +
scale_fill_manual('method', values = c(ggblue), guide=  FALSE) +
ylab('Reserve') +
theme(legend.position = 'bottom')
count.plot <- ggplot() + ggstyle +
geom_point(aes(evaluationDates, output[, 'ibnrCount.actual'], color = 'actual')) +
geom_line(aes(evaluationDates, output[, 'ibnrCount.actual'], color  = 'actual')) +
geom_point(aes(evaluationDates, output[, 'ibnrCount.pred'], color = 'granular')) +
geom_line(aes(evaluationDates, output[, 'ibnrCount.pred'], color = 'granular')) +
geom_ribbon(aes(evaluationDates, ymin = output[, 'ibnrCount.q025'], ymax = output[, 'ibnrCount.q975'], fill = 'granular') , alpha = 0.2) +
geom_point(aes(evaluationDates, output[, 'ibnrCount.dcl'], color = 'dcl')) +
geom_line(aes(evaluationDates, output[, 'ibnrCount.dcl'], color = 'dcl')) +
ggtitle('IBNR Count - Argenta Brand') +
scale_colour_manual('method', values = c('black', gggreen, ggblue)) +
scale_fill_manual('method', values = c(ggblue), guide=  FALSE) +
ylab('IBNR') +
theme(legend.position = 'bottom')
require(gridExtra)
grid.arrange(reserve.plot + theme(legend.position = 'none'),
count.plot)
count.plot)
require(tidyr)
add <- function(x){return (x+5)}
6 %>% add() %>% add()
add <- function(x, y){return (x+y)}
6 %>% add(3) %>% add(5)
6 %>% add(3) %>% add(5)
?pnbinom
m <- function(n, p) {n*(1-p)/p}
m(0.81907, 0.04134)
m <- function(n, p) {c(n*(1-p)/p, n*(1-p)/p^2)}
m(0.81907, 0.04134)
m <- function(n, p) {c(n*(1-p)/p, sqrt(n*(1-p)/p^2))}
m(0.81907, 0.04134)
m(4.28866, 0.58946)
m(0.87800, 0.02265)
m(2.73547, 0.28538)
m(230899.2, 0.99999)
m(230899.2, 0.999999)
m(15.3, 0.69729)
m(18707, 0.99989)
size <- c(0.878, 2.73547, 230899.2)
p <- c(0.02882, 0.28538, 0.99999)
w <- c(0.11786, 0.30627, 0.57586)
seq_along(size)
x <- 1:52
component <- paste(size, ', ', w)
component
component <- paste(size[1], ', ', w[1])
component
component <- paste(size[1], ', ', w[1], sep = '')
df <- rbind(df, data.frame(x = x,
component = rep(component, 52),
prob = w[i] * pnbinom(x, size = size[i], prob = p[i])))
size <- c(0.878, 2.73547, 230899.2)
p <- c(0.02882, 0.28538, 0.99999)
w <- c(0.11786, 0.30627, 0.57586)
df <- data.frame();
x <- 0:51
for(i in seq_along(size))
{
component <- paste(size[i], ', ', p[i], sep = '')
df <- rbind(df, data.frame(x = x,
component = rep(component, 52),
prob = w[i] * pnbinom(x, size = size[i], prob = p[i])))
}
df
ggplot(data = df) + ggstyle +
geom_bar(aes(x, prob))
ggplot(data = df) + ggstyle +
geom_col(aes(x, prob))
for(i in seq_along(size))
{
component <- paste(size[i], ', ', p[i], sep = '')
df <- rbind(df, data.frame(x = x,
component = rep(component, 52),
prob = w[i] * dnbinom(x, size = size[i], prob = p[i])))
}
ggplot(data = df) + ggstyle +
geom_col(aes(x, prob))
size <- c(0.878, 2.73547, 230899.2)
p <- c(0.02882, 0.28538, 0.99999)
w <- c(0.11786, 0.30627, 0.57586)
df <- data.frame();
x <- 0:51
for(i in seq_along(size))
{
component <- paste(size[i], ', ', p[i], sep = '')
df <- rbind(df, data.frame(x = x,
component = rep(component, 52),
prob = w[i] * dnbinom(x, size = size[i], prob = p[i])))
}
ggplot(data = df) + ggstyle +
geom_col(aes(x, prob))
ggplot(data = df) + ggstyle +
geom_col(aes(x, prob, color = component))
ggplot(data = df) + ggstyle +
geom_col(aes(x, prob, fill = component))
ggplot(data = df) +
geom_col(aes(x, prob, fill = component))
devtools::install_github("yihui/xaringan")
devtools::install_github("yihui/xaringan")
install.packages(glue)
install.packages('glue')
install.packages("glue")
devtools::install_github("yihui/xaringan")
install.packages("Rcpp")
devtools::install_github("yihui/xaringan")
install.packages("rmarkdown")
devtools::install_github("yihui/xaringan")
devtools::install_github("yihui/xaringan")
install.packages("rlang")
devtools::install_github("yihui/xaringan")
xaringan:::inf_mr()
xaringan:::inf_mr()
options(htmltools.dir.version = FALSE)
par(mar = c(4, 4, 1, .1))
?par
plot(cars, pch = 15, col = 'darkgray', las = 1)
plot(cars, pch = 15, col = 'darkgray', las = 1)
plot(cars, pch = 15, col = 'darkgray', las = 1)
plot(cars, pch = 15, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
plot(cars, pch = 15, col = 'darkgray', las = 1)
.rs.setNotebookMargins
par(mar = c(4, 4, 1, .1))
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 15, col = 'darkgray', las = 1)
par(mar = c(4, 4, 1, .1))
abline(fit, lwd = 2)
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 15, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
par(mar = c(4, 4, 1, .1))
.rs.setNotebookMargins <- function(){}
par(mar = c(4, 4, 1, .1))
require(base)
par(mar = c(4, 4, 1, .1))
require(graphics)
par(mar = c(4, 4, 1, .1))
par(mar = c(4, 4, 1, .1))
ggstyle
ggstyle
Sys.getenv("R_PROFILE_USER")
candidates <- c( Sys.getenv("R_PROFILE"),
file.path(Sys.getenv("R_HOME"), "etc", "Rprofile.site"),
Sys.getenv("R_PROFILE_USER"),
file.path(getwd(), ".Rprofile") )
Filter(file.exists, candidates)
5
library(extrafont)
font_import(pattern= "lmroman*")
y
font_import(pattern= "lmroman*")
font_import(pattern= "lmroman*") y
?font_import
font_import(pattern= "lmroman*", prompt = FALSE)
5
options(htmltools.dir.version = FALSE)
par(mar = c(4, 4, 1, .1))
xaringan:::inf_mr()
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 15, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 18, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 18, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 18, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 18, col = 'blue', las = 1)
abline(fit, lwd = 2)
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 18, col = 'blue', las = 1)
abline(fit, lwd = 2)
ggplot(mtcars) +   #<<
geom_point(aes(mpg, disp)) +
geom_smooth()    #<<
ggplot(mtcars) +   #<<
geom_point(aes(mpg, disp)) +
geom_smooth(aes(mpg, disp))    #<<
candidate <- c(3, 8, 7, 1)
t1 <- permuteGeneral(candidate, 4)
install.packages("arrangements")
library(arrangements)
candidate <- c(3, 8, 7, 1)
t1 <- permuteGeneral(candidate, 4)
t1 <- permutations(candidate, 4)
t1
apply(permutations(candidate, 4), 1, sum)
apply(permutations(candidate, 4), 1, paste)
apply(permutations(candidate, 4), 1, function(x){paste(x, collapse='')})
isprime(as.numeric(apply(permutations(candidate, 4), 1, function(x){paste(x, collapse='')})))
install.packages("gmp")
library(gmp)
install.packages("gmp")
library(arrangements)
library(gmp)
candidate <- c(3, 8, 7, 1)
isprime(as.numeric(apply(permutations(candidate, 4), 1, function(x){paste(x, collapse='')})))
isprime(as.numeric(apply(permutations(candidate, 4), 1, function(x){paste(x, collapse='')})), reps = 100)
x <- as.numeric(apply(permutations(candidate, 4), 1, function(x){paste(x, collapse='')})
x <- as.numeric(apply(permutations(candidate, 4), 1, function(x){paste(x, collapse='')}))
isprime(x)
which(isprime(x))
x[which(isprime(x))==2]
x[which(isprime(x)==2)]
install.packages("primes")
library(primes)
is_prime(x)
x[which(is_prime(x))]
install.packages("tidyverse")
xaringan:::inf_mr()
?as.date
?as.Date
options(htmltools.dir.version = FALSE)
head(policy_data[, c('debut_pol', 'start')])
seq(start = '2019-01-01', end = '2019-12-31', by = '1 month')
m <- matrix(rexp(9), nrow = 3, ncol = 3)
m
set.seed(1)
m <- matrix(rexp(9), nrow = 3, ncol = 3)
m
# Generate data
m <- matrix(rexp(16), nrow = 4, ncol = 4)
m
# Generate data
data_ull <- matrix(rexp(16), nrow = 4, ncol = 4)
set.seed(1)
# Generate data
data_full <- matrix(rexp(16), nrow = 4, ncol = 4)
rows <- rowSums(data_full)
# Aggregated data available
rows <- rowSums(data_full)
cols <- colSums(data_full)
# Convert to uniform observations ( 1.a )
rank(rows)
# Convert to uniform observations ( 1.a )
u <- rank(rows) / (length(rows) + 1)
v <- rank(cols) / (length(cols) + 1)
# Fit copula (Gumbel)
require(copula)
fit.copula(c(u, v), family = "gumbel")
?fitCopula
fitCopula(gumbelCopula(), cbind(u, v), method = "mpl")
u
cbind(u, v)
corr(u, v)
cor(u, v)
?cor
cor(u, v,, method = 'kendall')
set.seed(1)
# Generate data
size <- 5;
data_full <- matrix(rexp(size^2), nrow = size, ncol = size)
# Aggregated data available
rows <- rowSums(data_full)
cols <- colSums(data_full)
# Convert to uniform observations ( 1.a )
u <- rank(rows) / (length(rows) + 1)
v <- rank(cols) / (length(cols) + 1)
# Fit copula (Gumbel)
require(copula)
fitCopula(gumbelCopula(), cbind(u, v), method = "mpl")
rows
u
v
cor(u, v, method = 'kendall')
set.seed(1)
# Generate data
size <- 4;
data_full <- matrix(rexp(size^2), nrow = size, ncol = size)
# Aggregated data available
rows <- rowSums(data_full)
cols <- colSums(data_full)
# Convert to uniform observations ( 1.a )
u <- rank(rows) / (length(rows) + 1)
v <- rank(cols) / (length(cols) + 1)
# Fit copula (Gumbel)
require(copula)
fitCopula(gumbelCopula(), cbind(u, v), method = "mpl")
fit <- fitCopula(gumbelCopula(), cbind(u, v), method = "mpl")
str(fit)
fit@copula
fittedCopula <- fit@copula
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
require(dplyr)
tbl_df(iris)
glimpse(iris)
gather(cases, "year", "n", 2:4)
require(tidyr)
gather(cases, "year", "n", 2:4)
?gather
stocks <- tibble(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
gather(stocks, stock, price, -time)
stocks
gather(stocks, stock, price, -time)
a <- tibble(
x = c('A', 'B', 'C'),
y = c(1, 2, 3)
)
b <- tibble(
x = c('A', 'B', 'D'),
z = c(4, 5, 6)
)
left_join(a, b, by = x)
left_join(a, b, by = "x")
right_join(a, b, by = "x")
b <- tibble(
x = c('A', 'A', 'B', 'D'),
z = c(4, 5, 6, 7)
)
right_join(a, b, by = "x")
left_join(a, b, by = "x")
a <- tibble(
x = c('A', 'A', 'B', 'C'),
y = c(1, 1.5, 2, 3)
)
b <- tibble(
x = c('A', 'A', 'B', 'D'),
z = c(4, 4.5, 5, 6)
)
right_join(a, b, by = "x")
left_join(a, b, by = "x")
inner_join(a, b, by = "x")
full_join(a, b, by = "x")
as.Date(17166)
as.Date(17166, origin = as.Date("1970-01-01"))
packages <- c("tidyverse", "sas7bdat", "corrplot", "readxl", "data.table", "gapminder", "microbenchmark")
new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
all_packages <- c("ggplot2", "dplyr", "tidyr", "purrr", "readr", "tibble", "lubridate", "sas7bdat", "corrplot", "readxl", "data.table", "gapminder", "microbenchmark")
if(sum(!(all_packages %in% installed.packages()[, "Package"]))) {
stop("Not all required packages are installed!")
} else {
message("Everything is set up correctly. You are ready for the workshop!")
}
xaringan:::inf_mr()
xaringan:::inf_mr()
sevr::deamon_stop(2)
sevr::deamon_stop(1)
servr::deamon_stop(1)
servr::daemon_stop(1)
servr::daemon_stop(2)
xaringan:::inf_mr()
servr::daemon_stop(1)
servr::daemon_stop(2)
require(microbenchmark)
m <- matrix(rnorm(100*100), nrow = 100)
v <- runif(100)
t(v * t(m))
rep(v, rep(nrow(m), length(v)))
rep(v, each = nrow(m)
rep(v, each = nrow(m))
microbenchmark(t(v * t(m)),
m %*% diag(v),
m * rep(v, each = nrow(m)),
m * rep(v, rep(nrow(m), length(v))))
benchmark <- microbenchmark(t(v * t(m)),
m %*% diag(v),
m * rep(v, each = nrow(m)),
m * rep(v, rep(nrow(m), length(v))))
plot(benchmark)
autoplot(benchmark)
xaringan:::inf_mr()
xaringan:::inf_mr()
Column_product <- function(m, v){
for(j in 1:ncol(m)) {
m[, j] <- m[, j] * v[j]
}
return(m)
}
m <- matrix(rnorm(100*100), nrow = 100)
v <- runif(100)
Column_product(m, v)
all.equal(Column_product(m, v), m %*% diag(v))
tic()
start <- system.time()
start <- Sys.time()
Sys.sleep(1)
end <- Sys.time()
end - start
start <- Sys.time()
Sys.sleep(1)
end <- Sys.time()
end - start
start <- Sys.time()
Sys.sleep(0.1)
end <- Sys.time()
end - start
start <- Sys.time()
Sys.sleep(0.5)
end <- Sys.time()
end - start
options(htmltools.dir.version = FALSE)
100!
factorial(100)
xaringan:::inf_mr()
options(htmltools.dir.version = FALSE)
gapminder2007 <- filter(gapminder, year == 2007)
require(gapminder)
gapminder2007 <- filter(gapminder, year == 2007)
head(gapminder)
require(tidyverse)
gapminder2007 <- filter(gapminder, year == 2007)
breaks <- c(0, quantile(gapminder2007$lifeExp, c(0.25, 0.5, 0.75)), Inf)
breaks
gapminder2007 %>%
group_by(life_expectancy_binned) %>%
summarise(n())
gampminder2007
gapminder2007 <- filter(gapminder, year == 2007)
breaks <- c(0, quantile(gapminder2007$lifeExp, c(0.25, 0.5, 0.75)), Inf)
breaks
gampminder2007 <- gampminder2007 %>%
mutate(life_expectancy_binned = cut(gapminder2007$lifeExp, breaks))
gampminder2007 <- gapminder2007 %>%
mutate(life_expectancy_binned = cut(gapminder2007$lifeExp, breaks))
gapminder2007 %>%
group_by(life_expectancy_binned) %>%
summarise(n())
gampminder2007
gapminder2007 %>%
group_by(life_expectancy_binned)
gapminder2007 <- gapminder2007 %>%
mutate(life_expectancy_binned = cut(gapminder2007$lifeExp, breaks))
gapminder2007 %>%
group_by(life_expectancy_binned) %>%
summarise(n())
pagedown::chrome_print("Advanced.html")
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir);
setwd("C:/Users/u0110176/Dropbox/R tutorial/Advanced R")
pagedown::chrome_print("Advanced.html")
pagedown::chrome_print("Advanced.Rmd")
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir)
setwd("C:/Users/u0110176/Dropbox/Git Uploads/workshop-R/2 - Advanced R")
pagedown::chrome_print("Advanced.html")
pagedown::chrome_print("advanced_R_workshop_NN.html")
